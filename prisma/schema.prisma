// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Users {
  id                   String    @id @default(cuid())
  username             String    @unique
  password             String
  role                 String
  firstName            String
  lastName             String
  email                String
  phone                String?
  address              String?
  lastLogAt            DateTime?
  lastPasswordChangeAt DateTime?
  isActive             Boolean   @default(false)

  passwordReset      PasswordReset[]      @relation("password_reset_user")
  loginLog           LoginLog[]           @relation("login_log_user")
  opportunityHistory OpportunityHistory[] @relation("opposhistory_changer")
  opportunityTeam    OpportunityTeam[]    @relation("opp_team")

  managerId String?
  manager   Users?  @relation("manager_user", fields: [managerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  minions   Users[] @relation("manager_user")

  personsOwner       Persons[]       @relation("persons_owner")
  orgsOwner          Orgs[]          @relation("orgs_owner")
  OpportunitiesOwner Opportunities[] @relation("oppos_owner")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  users     Users    @relation("password_reset_user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt DateTime @default(now())
}

model LoginLog {
  id     String  @id @default(cuid())
  userId String?
  users  Users?  @relation("login_log_user", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  status String // success, bad login attempt, bad login attempt bad userid

  createdAt DateTime @default(now())
}

model Registrations {
  id          String   @id @default(cuid())
  username    String?
  firstName   String
  lastName    String
  email       String
  phone       String?
  address     String?
  isProcessed Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

///// CRM tables

model Persons {
  id          String  @id @default(cuid())
  firstName   String
  middleName  String?
  lastName    String
  isActive    Boolean @default(true)
  email       String?
  phone       String?
  address     String? // the contents will be Json
  description String?

  personOrgs      PersonsOrgs[]
  opportunities   Opportunities[]
  OpportunityTeam OpportunityTeam[]

  ownerId String
  owner   Users  @relation("persons_owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgTypes {
  id       String  @id
  isActive Boolean @default(true)
  orderBy  Int     @default(100)

  orgs Orgs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrgIndustries {
  id       String  @id
  isActive Boolean @default(true)
  orderBy  Int     @default(100)

  orgs Orgs[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Orgs {
  id          String  @id @default(cuid())
  name        String
  isActive    Boolean @default(true)
  address     String? // the contents will be Json
  description String?
  website     String?

  personsOrgs   PersonsOrgs[]
  opportunities Opportunities[]

  orgType       String?
  orgTypes      OrgTypes?      @relation(fields: [orgType], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orgIndustry   String?
  orgIndustries OrgIndustries? @relation(fields: [orgIndustry], references: [id], onDelete: NoAction, onUpdate: NoAction)

  ownerId String
  owner   Users  @relation("orgs_owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdaAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PersonsOrgs {
  id          String  @id @default(cuid())
  title       String?
  subOrg      String?
  email       String?
  phone       String?
  address     String? // the contents will be Json
  description String?

  orgId    String
  org      Orgs    @relation(fields: [orgId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  personId String
  person   Persons @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orgId, personId])
}

model OpportunityTeam {
  id   String  @id @default(cuid())
  role String?

  opportunityId String
  opportunity   Opportunities @relation(fields: [opportunityId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  userId   String?
  user     Users?   @relation("opp_team", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  personId String?
  person   Persons? @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpportunityStatuses {
  id       String  @id
  isActive Boolean @default(true)
  orderBy  Int     @default(100)
  type     String? // Lead or Opp
  isClosed Boolean @default(false) // Lead or Opp

  opportunities Opportunities[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpportunityTypes {
  id       String  @id
  isActive Boolean @default(true)
  orderBy  Int     @default(100)

  opportunities Opportunities[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OpportunitySources {
  id       String  @id
  isActive Boolean @default(true)
  orderBy  Int     @default(100)

  opporunities Opportunities[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// opportunities
// should be either a orgId or personId, but not both
model Opportunities {
  id   String @id @default(cuid())
  name String @default("Name your opportunity something meaningful")

  statusChangeDate   DateTime?
  expectedCloseDate  DateTime?
  actualClosedDate   DateTime?
  description        String?
  expectedOutcome    String?
  closedOutcome      String?
  activityDiscussion String?
  amount             BigInt? // store as pennies USD

  isActive Boolean @default(true)
  type     String? // Lead or Opp

  opportunityHistory  OpportunityHistory[]
  opportunityTeam     OpportunityTeam[]
  opportunityType     String?
  opportunityTypes    OpportunityTypes?    @relation(fields: [opportunityType], references: [id])
  opportunitySource   String?
  opportunitySources  OpportunitySources?  @relation(fields: [opportunitySource], references: [id])
  opportunityStatus   String?
  opportunityStatuses OpportunityStatuses? @relation(fields: [opportunityStatus], references: [id])

  orgId String?
  orgs  Orgs?   @relation(fields: [orgId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  personId String?
  persons  Persons? @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  ownerId String
  owner   Users  @relation("oppos_owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdaAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model OpportunityHistory {
  id String @id @default(cuid())

  opp   Opportunities @relation(fields: [oppId], references: [id])
  oppId String

  userId String?
  user   Users?  @relation("opposhistory_changer", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  data String // this will be JSON.. just the changes

  createdaAt DateTime @default(now())
}

// currently using changes to this to force prisma to generate new, when only spelling issue above
model Event {
  id String @id

  name      String
  eventTime DateTime
  location  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
